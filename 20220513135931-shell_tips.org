:PROPERTIES:
:ID:       3453ED9D-38E6-4EDA-9652-189BCABA429F
:END:
#+title: Shell tips
#+date: 2022-05-13 13:59 PM
#+updated: 2023-01-31 09:30 AM
#+filetags: :shell:

Just some various tips for writing shell scripts or doing cmd line stuff.

* Get the first n lines from STDOUT
  We can use the ~head~ program for this. ~head~ will return the first n lines
  of a file, but can be used with ~STDOUT~ as well.

  Example: get the docker image ID for the last created image.

  #+begin_src shell
    docker images --format "{{.ID}}" | head -n 1
  #+end_src

  See also ~man head~

* Forward arguments
  Forward all arguments passed to a script to some other program called by the
  script.

  ~$@~ Represents all arguments, so in a script that does something with npm,
  for example, we can forward all the arguments passed to the script to npm:

   #+begin_src shell
     npm $@
   #+end_src

* Default arguments
  If a parameter is unset or null, use a default value.

  See also https://www.gnu.org/savannah-checkouts/gnu/bash/manual/bash.html#Shell-Parameter-Expansion

  #+begin_src
    npm run test ${FILE_PATH:-'tests/unit/**/*.spec.*(ts|js)'}
  #+end_src

  We can also set the parameter by using ~=~ instead of ~-~ above.
  
* List open files
  Use ~lsof~
  
  It will include open sockets since anything IO is considered a file on a UNIX
  OS.

** Examples
*** List Internet files    
    #+begin_src shell
      lsof -i 
    #+end_src

    ...on a specific port
    
    #+begin_src 
      lsof -i :3000 
    #+end_src

    ...or list all processes that are listening on some port

    #+begin_src shell
    lsof -i -P -n | grep LISTEN
    #+end_src
* Test if process is running
  Here I wanted to test if reaper was already running before trying to start it.
  I don't want two instances of the program. Note the ~&~ sends it to a subshell
  (child process)

  #+begin_src shell
    if ! [[ "`pidof -x reaper -o %PPID`" ]];
      then reaper &
    fi
  #+end_src

* Prevent scripts from going hog wild
  Put ~set -euo pipefail~ as the first line of the script
  - ~-e~ : Fails the entire script if any command has a non-zero exit status
    (ie, prevent subsequent commands from being executed)
  - ~-o~  : Use the return code of any command that failed in a pipeline, not
    just the last successful one.
  - ~-u~  : Makes unbound variables throw an error.
* Repeat / for loops
  I found this useful to test flaky RSpec tests
  #+begin_src shell
  for i in {1..5}
  do
  echo $i
  done
  #+end_src
