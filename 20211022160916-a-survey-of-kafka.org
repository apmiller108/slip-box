:PROPERTIES:
:ID:       355A2592-CBDA-4B02-BC9B-9F75F3867C62
:END:
#+title: A Survey of Kafka
#+date: 2021-10-22 16:09 PM
#+updated: 2021-11-11 09:11 AM
#+filetags: :kafka:

* What is it?
  See also https://kafka.apache.org/
  
  It's a distributed event streaming platform.

** General use case
   Share data (ie, events, messages, etc) between applications. Producers
   publish messages and consumers read those messages. See [[https://kafka.apache.org/documentation/#intro_usage][introduction]] for more
   details.
 
   A good way to learn how Kafka works is to spin it up locally and use the CLI
   to create topics, publish and consume messages. See CLI usages below.

   See [[id:80A19143-BA7E-480C-B5AF-0A2EECA9FD88][Kafka docker]] for a super quick way to get up and running locally.
* Kafka CLI
** kafka-topics
   See also
   https://docs.confluent.io/platform/current/kafka/post-deployment.html#admin-operations

*** Adding a topic
     #+begin_src shell
       kafka-topics --bootstrap-server localhost:9092 --topic first_topic --create --partitions 3 --replication-factor 1
     #+end_src

     ~--replication-factor~: how many nodes should partitions be replicated to.
     Must be <= number of brokers in the cluster. 

*** Listing topics
     #+begin_src shell
       kafka-topics --bootstrap-server localhost:9092 --list
     #+end_src

*** Describe a topic
     Provides partition, leader, Isr, and replicas info

     #+begin_src shell
       kafka-topics --bootstrap-server localhost:9092 --topic first_topic --describe
     #+end_src

*** Delete a topic

     #+begin_src shell
     kafka-topics --bootstrap-server localhost:9092 --topic second_topic --delete
     #+end_src

** kafka-console-producer
   Create messages. This opens a prompt where you can add one or more messages.
   Press enter key to add the next message. ~C-c~ to exit prompt.

   #+begin_src shell 
   kafka-console-producer --broker-list 127.0.0.1:9092 --topic first_topic --producer-property acks=all
   #+end_src

   - ~producer-property~ is optional and can be used to add other properties. In
     this example, setting the [[https://docs.confluent.io/platform/current/installation/configuration/producer-configs.html#acks][acks]] property.
   - You can specify a topic that doesn't exist and it will be created. You'll
     get an error the first time a message is posted, but it will recover and
     succeed after the topic is created and a leader is selected.

** kafka-console-consumer
   Starts a consumer of messages created by a producer

   #+begin_src  shell
   kafka-console-consumer --bootstrap-server 127.0.0.1:9092 --topic first_topic
   #+end_src

   - This starts the consumer listening for new messages.
   - Add ~--from-beginning~ to consume all the messages and continue to listen
     for new ones.

*** Groups (~--group~ flag)
    - Consumers are should usually be grouped by an arbitrary ID.
    - Messages are consumed by group members from specific partitions (ie, a
      single consumer in a group doesn't read all the messages unless it is the
      only consumer).
    - Messages are read once by consumers in a group (ie, consumer group offsets
      is what keeps track of messages already consumed by a group)
    - When a grouped consumer is started, unread messages created before it was
      started are consumed.

      #+begin_src shell
      kafka-console-consumer --bootstrap-server 127.0.0.1:9092 --topic first_topic --group app-foo
      #+end_src

** kafka-consumer-groups     
   Use this to list, describe, delete groups. Also reset consumer group offsets

*** List groups
    #+begin_src shell
    kafka-consumer-groups --bootstrap-server localhost:9092 --list
    #+end_src

*** Describe a group
    This will give you info about where the consumers are in consuming messages
    (ie consumer offsets, lag, etc)
    #+begin_src shell
    kafka-consumer-groups --bootstrap-server localhost:9092 --describe --group app-foo
    #+end_src

*** Reset offsets
    There's a bunch of different options for where to reset the offset to. Here's
    one example using ~--to-earliest~.

    #+begin_src shell
    kafka-consumer-groups --bootstrap-server localhost:9092 --group app-foo --topic first_topic --reset-offsets --to-earliest --execute
    #+end_src

* Ruby
  See also [[https://medium.com/zendesk-engineering/kafka-on-ruby-fdab12302146][this Zendesk post]] for a nice breakdown of the differences between
  these libraries. 
** Libraries
   - [[https://github.com/zendesk/ruby-kafka][ruby-kafka]]
   - [[https://github.com/appsignal/rdkafka-ruby][rdkafka-ruby]]
** Framworks
   - [[https://github.com/zendesk/racecar][racecar]]
   - [[https://github.com/phobos/phobos][phobos]]
   - [[https://github.com/karafka/karafka][karafka]]
   
