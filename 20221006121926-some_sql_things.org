:PROPERTIES:
:ID:       E5F844B5-1C69-4CD6-B0D8-C785C776CB5C
:END:
#+title: Some SQL things
#+date: 2022-10-06 12:19 PM
#+updated: 2023-01-30 11:36 AM
#+filetags: :sql:postgres

* Join only on first record
  Shameless borrowed from https://www.sisense.com/blog/4-ways-to-join-only-the-first-row-in-sql/

** Correlated subquery
   This loops since the subquery runs once for each record in the outer query

   #+begin_src sql
     select * from users
       join widgets on widgets.id = (
         select id from widgets
         where widgets.user_id = users.id
         order by created_at desc
         limit 1)
   #+end_src

** Complete subquery
*** PostgreSQL ~DISTINCT ON~ with different ~ORDER BY~

   #+begin_src sql
     select * from users
       join (
         select distinct on (user_id) *
           from widgets
           order by user_id, created_at desc)
         as most_recent_user_widgeton on users.id = most_recent_user_widget.user_id
   #+end_src

   
*** If not using PostgreSQL (ie ~DISTINCT ON~)
    We can use the ~ROW_NUMBER~ function with ordering and selecting the first row.

    See also https://stackoverflow.com/a/49980276

   #+begin_src sql
     select * from users
       join (
         select * from (
             select *, ROW_NUMBER() OVER(PARTITION BY user_id ORDER BY created_at desc) rn
             from widgets) w where w.rn = 1
           ) as most_recent_user_widgeton on users.id = most_recent_user_widget.user_id
   #+end_src

* Date / Time stuff
** Some length of time ago
*** PostgreSQL
    #+begin_src sql
    NOW() - '1 day'::INTERVAL
    #+end_src
*** MSSQL    
   #+begin_src sql
    DATEADD(day, -1, GETDATE())
   #+end_src
** Extract date part
*** MSQL
    #+begin_src sql
    SELECT DATEPART(MINUTE, CURRENT_TIMESTAMP)
    #+end_src
** Convert Datetime to Date
*** MSSQL
   #+begin_src sql
   SELECT DATEADD(dd, 0, DATEDIFF(dd, 0, GETDATE()))
   #+end_src

   OR
   
   #+begin_src sql
   SELECT CONVERT(DATE, GETDATE())
   #+end_src
* JSON
** bytea
   If you need to insert into a ~bytea~ column, one approach would be to hexdump
   the file the insert the it using the ~convert~ utility.

   #+begin_src shell
   xxd -ps /path/to/json | tr -d '\n' | pbcopy
   #+end_src

   #+begin_src sql
   update sometable set "json" = convert('PASTE_HEXDUMP_FROM_ABOVE_STEP_HERE', 'hex') where id = 1
   #+end_src
