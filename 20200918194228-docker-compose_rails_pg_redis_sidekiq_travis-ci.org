#+title: docker-compose Rails PG Redis Sidekiq Travis-CI
#+date: 2020-09-18 19:42 PM
#+updated: 2021-08-16 07:47 AM
#+roam_tags: docker rails

* Instructions
  This is a generator for Rails project setup with docker, Postgres, Redis,
  Sidekiq; with container orchestration using docker-compose.

  1. Set the ~:HEADER-ARGS:~ property with the ~:tangle~ path for each generated
     file.
  2. Set the ruby image version in the Dockerfile and the script
  3. Set the database and redis images in the docker-compose
  4. Create a folder locally where you want the application files to live
* Dockerfile
  :PROPERTIES:
  :HEADER-ARGS: :tangle ~/code/rails_docker/Dockerfile :mkdirp yes
  :END:

  #+begin_src dockerfile
    FROM ruby:3.0

    RUN curl -sS https://dl.yarnpkg.com/debian/pubkey.gpg -o /root/yarn-pubkey.gpg && apt-key add /root/yarn-pubkey.gpg
    RUN echo "deb https://dl.yarnpkg.com/debian/ stable main" > /etc/apt/sources.list.d/yarn.list
    RUN apt-get update && apt-get install -y build-essential locales nodejs yarn

    RUN locale-gen en_US.UTF-8
    ENV LANG en_US.UTF-8
    ENV LANGUAGE en_US:en
    ENV LC_ALL en_US.UTF-8

    RUN mkdir -p /app
    WORKDIR /app

    COPY Gemfile Gemfile.lock ./
    RUN gem install bundler && bundle install --jobs 20 --retry 5

    COPY . ./

    EXPOSE 3000
    CMD ["bundle", "exec", "rails", "server", "-b", "0.0.0.0"]
  #+end_src

* docker-compose
  :PROPERTIES:
  :HEADER-ARGS: :tangle ~/code/rails_docker/docker-compose.yml
  :END:
  
  This manages the following containers:

  - web
  - database
  - redis
  - sidekiq

  Environment variables are provided via a .env file in the project root.
  
  #+begin_src dockerfile
    version: "3.6"

    services:
      web:
        tty: true
        stdin_open: true
        build: .
        command: bash -c "rm -f tmp/pids/server.pid && bundle exec rails s -p 3000 -b '0.0.0.0'"
        volumes:
          - ".:/app"
        ports:
          - "3000:3000"
        links:
          - "database"
          - "redis"
      database:
        image: "postgres:12"
        volumes:
          - 'postgres:/var/lib/postgresql/data'
        ports:
          - "5432"
        env_file:
          - ".env"
      redis:
        image: "redis:6"
        volumes:
          - "redis:/data"
        ports:
          - "6379"
      sidekiq:
        depends_on:
          - "database"
          - "redis"
        build: .
        volumes:
          - ".:/app"
          - "/app/tmp" # don't mount tmp dir
        command: "bundle exec sidekiq"
        env_file:
          - ".env"

    volumes:
      redis:
      postgres:
  #+end_src
  
  NOTE: It can be helpful to expose the redis and database ports to the
  host machine so you can connect to them with tools from the host
  machine. The example below only exposes port ~3000~ of the web service to the
  host.

* Setup the project
  At this point we don't have a Gemfile, Gemfile.lock or rails installed, etc.
  But we can still do all the project setup within docker by pulling down the
  image, mounting the project directory as a volume and running a few commands.
  This will download the image, created a container and open a shell prompt in
  it: 

  ~docker run --rm -it -v "$PWD":/app -w /app ruby:3.0 sh~

  Then,

  - Install rails
    - ~gem install rails~
  - Install node and yarn (ie, for webpacker in the next step)
    - ~curl -sS https://dl.yarnpkg.com/debian/pubkey.gpg -o /root/yarn-pubkey.gpg && apt-key add /root/yarn-pubkey.gpg~
    - ~echo "deb https://dl.yarnpkg.com/debian/ stable main" > /etc/apt/sources.list.d/yarn.list~
    - ~apt-get update && apt-get nodejs yarn~
  - Setup rails project files. This will also run ~bundle~ that will generate
    the ~Gemfile~, ~Gemfile.lock~, and all the other configuration files.
    - ~rails new my_app~
    - ~mv my_app/* ./~
      Note: this will not move the dotfiles like ~.git~, ~.ruby-version~, etc. So
      move those too in a separate ~mv~ command.
    - ~bin/rails webpacker:install~
  - Add some ENV vars for postgres and redis to the ~.env~ referenced in the
    ~docker-compose.yml~
    - ~touch .env~
    - Add the following:
      #+begin_src yaml
        REDIS_URL=redis://redis:6379/1
        POSTGRES_HOST=database
        POSTGRES_USER=postgres
        POSTGRES_PASSWORD=postgres
        POSTGRES_DB=my_app_development
      #+end_src
  - Add ~sidekiq~ to the ~Gemfile~

* Run it  
  To start it up run:

  =docker-compose up=

  Shut it down with:

  =docker-compose down=

  See [[https://github.com/apmiller108/astronomania-api]] README for
  example of more commands like debugged with pry and running tests.

* Travis-CI
  Note the =COMPOSE_VERSION= is NOT the docker-compose file version, but
  the docker-compose release version:
  [[https://github.com/docker/compose/releases][Releases · docker/compose · GitHub]]

  Most of this is boiler plate from Travis' docs. The env stuff I had to
  figure out becuase I am using a .env file to pass config vars into
  containers with docker-compose. First I had to add the env vars to
  Travis' project settings. Then echo them into a .env file for
  docker-compose to read from.

  This is the ~travis.yml~. The env vars are stored in the travis ci project
  settings.
  
  #+begin_src yaml
    language: bash

    sudo: required

    services:
      - docker

    env:
      COMPOSE_VERSION: 1.26.2

    before_install:
     - sudo rm /usr/local/bin/docker-compose
     - curl -L https://github.com/docker/compose/releases/download/${COMPOSE_VERSION}/docker-compose-`uname -s`-`uname -m` > docker-compose
     - chmod +x docker-compose
     - sudo mv docker-compose /usr/local/bin
     - docker --version
     - docker-compose --version

    script:
      - touch .env
      - echo "POSTGRES_DB=${POSTGRES_DB}" >> .env
      - echo "POSTGRES_USER=${POSTGRES_USER}" >> .env
      - echo "POSTGRES_PASSWORD=${POSTGRES_PASSWORD}" >> .env
      - echo "POSTGRES_HOST=${POSTGRES_HOST}" >> .env
      - echo "NASA_API_KEY=${NASA_API_KEY}" >> .env
      - docker-compose up --detach --build
      - docker ps -a
      - docker-compose exec web bin/rails db:schema:load RAILS_ENV=test
      - docker-compose exec web bundle exec rspec

    after_script:
      - docker-compose down
      - rm .env

    notifications:
      email: false
  #+end_src

* Resources

  - [[https://yizeng.me/2019/11/09/setup-a-ruby-on-rails-6-api-project-with-docker-compose/][Setup a Ruby on Rails 6 API project with Docker Compose \| Yi Zeng's Blog]]
  - [[https://yizeng.me/2019/11/17/add-sidekiq-to-a-docker-compose-managed-rails-project/][Add Sidekiq to a Docker Compose managed Rails project \| Yi Zeng's Blog]]
  - [[https://learning.oreilly.com/library/view/docker-for-rails/9781680506730/f_0014.xhtml#part-development][Part I. Development - Docker for Rails Developers [Book]]]
  - [[https://docs.docker.com/compose/compose-file/][Compose file version 3 reference | Docker Documentation]]
  - https://evilmartians.com/chronicles/ruby-on-whales-docker-for-ruby-rails-development
