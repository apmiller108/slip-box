:PROPERTIES:
:ID:       D8401E83-5AB9-4736-AA4D-224A902DDEE5
:END:
#+title: SharedWorker
#+date: 2021-10-12 09:32 AM
#+updated: 2021-10-19 10:17 AM
#+filetags: :javascript:

* Key points
  - Can be accessed from difference browsing contexts (windows/tabs iframes,
    workers) within the same origin (protocol, host and port)
  - Inherits properties and methods (eg, ~addEventListener()~) from [[https://developer.mozilla.org/en-US/docs/Web/API/EventTarget][EventTarget]] 
  - Messages can be sent and received over the ~port~ property (ie, ~onmessage~,
    ~postMessage~)
* Debugging
** Chrome
   Visit ~chrome://inspect/#workers~
* self
  The ~self~ keyword in a SharedWorker context refers to the
  [[https://developer.mozilla.org/en-US/docs/Web/API/SharedWorkerGlobalScope][SharedWorkerGlobalScope]]. There is no ~window~ object here (ie, use
  ~self.setInterval()~)

  See also https://stackoverflow.com/a/11237259/5974855
* Webpack stuff
** For Webpack v4
   Use [[https://v4.webpack.js.org/loaders/worker-loader/#worker][worker-loader]]
   - I could not get this to work consistently using a webpackChain rule. I had to
     use an [[https://webpack.js.org/concepts/loaders/#inline][inline loader]].
   - See also https://github.com/dynamind/minimal-vue-worker#webpack-loader-configuration
** For Webpack v5
   You don't need worker-loader. Webpack v5 has built-in support for workers.
   See also https://webpack.js.org/guides/web-workers/
   
* Resources
  - https://developer.mozilla.org/en-US/docs/Web/API/SharedWorker
  - https://github.com/mdn/simple-shared-worker
    This demonstrates using a shared worker to perform simply multiplication
    operations for two browsing contexts.
