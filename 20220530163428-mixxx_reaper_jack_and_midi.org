:PROPERTIES:
:ID:       abbff1aa-b163-4f08-ba2c-c7ed8ca8ef12
:END:
#+title: Mixxx, Ardour, JACK and MIDI
#+date: 2022-05-30 16:34 PM
#+updated: 2022-06-05 20:19 PM
#+filetags: :linux:audio:

Do crazy shit with Mixxx, JACK server routing, DAWs with VST plugins and
MIDI control on Linux (Ubuntu/Pop_OS).

This is what I want to do:

- [X] Send each of Mixxx's 4 deck's audio streams to a track in Ardour.
- [X] Add Windows VST plugins as FX on those Ardour tracks.
- [X] Control the VST plugin FX parameters from a MIDI controller (Xone K2 in my
  case). 
- [ ] Send MIDI clock from Mixxx to Ardour to for the FX (like delay) that
  can use tempo and beat syncing.
- [X] Send the 4 Ardour deck tracks out of two audio interfaces (each with 4
  outputs) and into a 4 channel hardware mixer (Xone 43 in my case).
- [ ] Send the master mix out of the hardware mixer to an audio interface input to
  be recorded in Mixxx or Ardour

Here's how I am doing it:

* My Setup
  But first, an explanation of my hardware setup:
* The software
  I use Linux. This is the software I use. Some of the software mentioned here
  isn't directly used for this particular project, but I mention here since it's
  good to know about it in general for Linux audio production.
** Mixxx
   https://mixxx.org/
  
   Free, open source DJ software. Stands up to paid versions and works on Linux.
   It really is great.

*** Developer mode   
   You can start Mixxx with the ~--developer~ flag. In addition to extra logging
   and a developer menu in the GUI, it also adds the ~Midi Through Port-0~ as an
   option under Controllers. This is key for sending out MIDI time code from
   Mixxx without having to depending on a sound card.

   #+begin_src
     pasuspender -- mixxx --developer
   #+end_src

*** MIDI for light   
   The ~MIDI for light~
   can to send MIDI timecode from Mixxx to wherever you want (like a DAW, FX
   box, drum machine, lighting rig, etc.)

   - See https://github.com/mixxxdj/mixxx/wiki/Midi-Clock-Output for more
     details.
   - See also Mixxx's [[https://mixxx.discourse.group/t/midi-output-for-lightcontrol/13224/38][forum for MIDI output]]
  
** Ardour
   https://ardour.org/
  
   Full-on DAW that works on Linux. It's not free (unless you build from
   source), but it's a kind of pay what you want model as of writing this. It's
   great software and it can be a slave to an external MIDI clock source.
   
*** Midi Control
    [[https://www.youtube.com/watch?v=jE5lrzNsk-A\\][YouTube video: Using a MIDI Controller to Control Reaper's Functions]]
    This thing to note is that we can make custom mapping on Plugin params. Make
    sure to save it as an FX chain so you don't have to re-map it after
    restarting the application.
*** Using Windows VSTs in Linux
    Yes, this can be done, although I was only able to get VST3 (not VST 2) to
    work. I was probably doing something wrong, but I didn't care, only
    interested in VST3 anyhow. Doing this requires [[id:284b93d5-e030-4c8a-932b-03858767dfb6][Wine]] (see VST plugins
    section) and [[https://github.com/robbert-vdh/yabridge][yabridge]].  
** Jack Audio Connection Kit
   https://jackaudio.org/

   A Sound server. Lets you route audio and MIDI all over the place.
*** QjackCtl
    https://github.com/rncbc/qjackctl
    This is a GUI for managing the Jack server.
*** MIDI routing
    Need to install [[https://github.com/jackaudio/a2jmidid][a2jmidid]]. This somehow bridges the jack server MIDI port to
    ALSA MIDI.
    #+begin_src
    sudo apt-get install a2jmidid
    #+end_src

    In QjackCtl...
    - add ~a2jmidid -e &~ as a execute after startup script. This
      kicks off a2jmidid and will automatically map your midi controller to jack
      where it can be routed to a midi input.
    - I also added ~killall a2jmidid~ as a shutdown script to clean up after.

      
    Here's an example from Qjackctl, where I am routing MIDI from my Xone K2 to
    Reaper. The midi controller will now show up in Reaper in the midi device
    settings where it can be enabled for input and control.

    #+attr_html: :width 500
    [[file:images/qjackctl-midi.png]] 

*** Multiple audio interfaces
    JACK is designed to support a single audio interface. There are several
    work-arounds for those of us with several audio interfaces. See also
    https://jackaudio.org/faq/multiple_devices.html

**** alsa_in / alsa_out
    The [[http://manpages.ubuntu.com/manpages/bionic/man1/alsa_in.1.html][alsa_in / alsa_out]] programs can expose additional audio interfaces to
    JACK and sync their clocks. It basically works like this:

    1. Get a list of sound cards by ~cat /proc/asound/cards~
    2. Find the name of the sound card
    3. If you need outputs: ~alsa_out -d hw:NAME_OF_CARD~
    4. Just use ~alsa_in -d~ to enable inputs

**** zita-ajbridge
     https://kokkinizita.linuxaudio.org/linuxaudio/zita-ajbridge-doc/quickguide.html

     The two CLI tools this provides do the same thing as alsa_in / alsa_out but
     claims to have better sound quality. I did have better luck with using
     this to add a second audio interface to JACK.
    
*** Enable Realtime (Optional)
    Enabling this can help performance / latency. Most Linux distros have
    permissions around Realtime scheduling. See
    https://jackaudio.org/faq/linux_rt_config.html for how to enable it (it's
    really not hard).

    Then you can check the box "Realtime" in the Jack settings to use it.

*** Jack scripting (Optional)
    This is just here for reference. It can be useful to do some things via
    scripts, like make connections between ports in order to automate repetitive
    tasks. See [[https://askubuntu.com/questions/1153655/making-connections-in-jack-on-the-command-line][making connection in jack on the command line]].
    
** snd_virmidi
   This is Linux kernel module that can create virtual midi interfaces that
   appear as sound cards to the system. This isn't needed for this project, but
   it's good to know about.
   - https://github.com/anton-k/linux-audio-howto/blob/master/doc/os-setup/virtual-midi.md
   - https://linuxmusicians.com/viewtopic.php?t=20829
   - https://tldp.org/HOWTO/MIDI-HOWTO-10.html
   - https://music.stackexchange.com/questions/51463/how-to-use-snd-virmidi-on-linux

** snd-seq-dummy
   This is a Linux kernel module that can create midi through ports. This is
   only needed if you don't already have an ALSA midi through port or you need
   an extra one for some reason.

*** To start it
    n = how many ports you want
    #+begin_src shell
    sudo modprobe snd-seq-dummy ports=n
    #+end_src

**** To make it available after reboots
     Edit ~/etc/modprobe.d/midi.conf~ and add line ~options snd-seq-dummy ports=n~
*** To unload it  
   #+begin_src shell
   sudo modprobe -r snd-seq-dummy
   #+end_src

* Putting it all together
** JACK
** Ardour
** Mixxx   
